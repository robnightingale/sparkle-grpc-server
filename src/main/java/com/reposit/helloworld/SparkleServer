package com.rbccm.helloworld;/*
 * Copyright 2015, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;

import java.io.IOException;
import java.util.logging.Logger;

/**
 * The Sparkle Server.
 */
public class SparkleServer {

  private static final Logger logger = Logger.getLogger(SparkleServer.class.getName());

  /* The port on which the server should run */
  private final int port;
  private Server server;

  private final HelloWorldServiceImpl helloWorldService;
  private final TradeServiceImpl tradeService;
  private final PriceServiceImpl priceService;

  public SparkleServer(int port, HelloWorldServiceImpl helloWorldService, TradeServiceImpl tradeService, PriceServiceImpl priceService) {
    this.port = port;
    this.helloWorldService = helloWorldService;
    this.tradeService = tradeService;
    this.priceService = priceService;
  }

  public void start() throws IOException {

    logger.info("Server starting on port " + port + " ...");

    server = ServerBuilder.forPort(port)
            .addService(tradeService)
            .addService(helloWorldService)
            .addService(priceService)
            .build()
            .start();

    logger.info("Server started");

    Runtime.getRuntime().addShutdownHook(new Thread() {
      @Override
      public void run() {
        // Use stderr here since the logger may have been reset by its JVM shutdown hook.
        System.out.println("*** shutting down gRPC server since JVM is shutting down");
        SparkleServer.this.stop();
        System.out.println("*** server shut down");
      }
    });
  }

  /**
   * Await termination on the main thread since the grpc library uses daemon threads.
   */
  public void blockUntilShutdown() throws InterruptedException {
    if (server != null) {
      server.awaitTermination();
    }
  }

  private void stop() {
    if (server != null) {
      server.shutdown();
    }
  }

}
